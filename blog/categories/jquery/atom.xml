<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jquery | 10rane.com]]></title>
  <link href="http://tatsuyano.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://tatsuyano.github.io/"/>
  <updated>2013-10-21T23:50:42+09:00</updated>
  <id>http://tatsuyano.github.io/</id>
  <author>
    <name><![CDATA[tatsuyano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoffeeScriptの勉強 その４(クラス、Jquery)]]></title>
    <link href="http://tatsuyano.github.io/blog/2013/03/12/coffee-script-study-jquery/"/>
    <updated>2013-03-12T17:44:00+09:00</updated>
    <id>http://tatsuyano.github.io/blog/2013/03/12/coffee-script-study-jquery</id>
    <content type="html"><![CDATA[<h2>クラス</h2>

<p>{% codeblock Javascript Array Syntax lang:js <a href="http://j.mp/pPUUmW">http://j.mp/pPUUmW</a> MDN Documentation %}
class Animal
  constructor:(name) &ndash;> @name = name</p>

<pre><code>say:(word) -&gt; console.log "#{@name} said: #{word}"
</code></pre>

<p>class Dog extends Animal
  constructor:(name) &ndash;> super name</p>

<pre><code>say:(word) -&gt; super "Bowwow, #{word}"
</code></pre>

<p>dog = new Dog(&ldquo;Bob&rdquo;)
dog.say(&ldquo;hello&rdquo;)
{% endcodeblock %}</p>

<h3>静的なプロパティ</h3>

<p>クラスの静的なプロパティを定義するには変数名の頭に@を付けます。
{% codeblock Javascript Array Syntax lang:js <a href="http://j.mp/pPUUmW">http://j.mp/pPUUmW</a> MDN Documentation %}
class Dog
  @TYPE_CHIHUAHUA = 1
{% endcodeblock %}</p>

<p>コンパイル結果↓</p>

<p>{% codeblock Javascript Array Syntax lang:js <a href="http://j.mp/pPUUmW">http://j.mp/pPUUmW</a> MDN Documentation %}
var Dog;
Dog = (function() {
  function Dog() {}</p>

<pre><code>Dog.TYPE_CHIHUAHUA = 1;
return Dog;
</code></pre>

<p>})();
{% endcodeblock %}</p>

<p>クラスの静的なプロパティの使い方というか、そもそもJsのオブジェクト指向、クロージャの実装がしっかりと理解していない。ここは後日勉強する。</p>

<h2>無名関数</h2>

<p>setTimeoutなど引数に無名関数を渡したい場合は、次の行頭にカンマを付けます。
{% codeblock Javascript Array Syntax lang:js <a href="http://j.mp/pPUUmW">http://j.mp/pPUUmW</a> MDN Documentation %}
setTimeout &ndash;>
  console.log(&ldquo;ok&rdquo;)
  ,1000
{% endcodeblock %}</p>

<p>コンパイル結果↓</p>

<p>{% codeblock Javascript Array Syntax lang:js <a href="http://j.mp/pPUUmW">http://j.mp/pPUUmW</a> MDN Documentation %}
setTimeout(function() {
  return console.log(&ldquo;ok&rdquo;);
},1000);
{% endcodeblock %}</p>

<h2>コンパイルせずに、直接CoffeeScriptを記述する方法</h2>

<p>本家サイトに置いてある、「coffee-script.js」を読み込んで、scriptタグ
「script type=&ldquo;text/coffeescript"」で囲むと、直接CoffeeScriptが記述できる。</p>

<p>``` html
  <script type="text/javascript" src="http://coffeescript.org/extras/coffee-script.js"> </script></p>

<pre><code>&lt;script type="text/coffeescript"&gt;
    hogehoge...
&lt;/script&gt;
</code></pre>

<p>```</p>

<h2>CoffeeScriptで、Jqueryを使う</h2>

<p>これは、とくに考えずに、そのままCoffeeScriptで記述するだけ。
Jsで書くより、カッコの入れ子がなくなり読みやすくなる。</p>

<p>``` html
  <script type="text/coffeescript"></p>

<pre><code>  $('#add-more').click -&gt;
        $('#add-more').hide()
        $('#task-add').fadeIn()
</code></pre>

<p>  </script>
```</p>

<p>以下のサイトを参考にさせていただきました。ありがとうございます！</p>

<ul>
<li><a href="http://tech.kayac.com/archive/coffeescript-tutorial.html#coffee_syntax_classes">今日から始めるCoffeeScript</a></li>
<li><a href="http://kudox.jp/java-script/js-private-static">JavaScriptのクロージャを利用したprivate staticメンバ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
